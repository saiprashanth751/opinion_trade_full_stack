// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  emailVerified DateTime?
  name          String?
  balance       Int            @default(0)
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  events        Event[]        @relation("EventParticipants")
  contracts     UserContract[]
  boughtTrades  Trade[]        @relation("BuyerTrades")
  soldTrades    Trade[]        @relation("SellerTrades")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  
  @@unique([email, token])
}

model Event {
  id              String         @id @default(cuid())
  eventId         String         @unique
  slug            String
  description     String
  title           String
  start_date      DateTime
  end_date        DateTime
  expiresAt       DateTime
  initialYesPrice Float
  initialNoPrice  Float
  sot             String
  traders         Int            @default(0)
  status          EventStatus    @default(ONGOING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  participants    User[]         @relation("EventParticipants")
  userContracts   UserContract[]
  trades          Trade[]
}

model UserContract {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  eventId            String
  event              Event    @relation(fields: [eventId], references: [id])
  yesContracts       Int      @default(0)
  noContracts        Int      @default(0)
  lockedYesContracts Int      @default(0)
  lockedNoContracts  Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, eventId])
}

model Trade {
  id        String   @id @default(cuid())
  tradeId   String   @unique
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  buyerId   String
  buyer     User     @relation("BuyerTrades", fields: [buyerId], references: [id])
  sellerId  String
  seller    User     @relation("SellerTrades", fields: [sellerId], references: [id])
  price     Float
  quantity  Int
  timestamp DateTime @default(now())

  @@index([buyerId])
  @@index([sellerId])
  @@index([eventId])
}

enum EventStatus {
  ONGOING
  ENDED
}

enum UserRole {
  ADMIN
  USER
}
