// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(cuid())
  firebaseUid String?        @unique
  phoneNumber String         @unique
  balance     Int            @default(0)
  role        UserRole
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  events      Event[]        @relation("EventParticipants")
  contracts   UserContract[]
  boughtTrades Trade[]       @relation("BuyerTrades") // Added inverse relation for buyer
  soldTrades  Trade[]        @relation("SellerTrades") // Added inverse relation for seller
  // expiresAt   DateTime
}

model Event {
  id              String         @id @default(cuid())
  eventId         String         @unique
  slug            String
  description     String
  title           String
  start_date      DateTime
  end_date        DateTime
  expiresAt       DateTime
  initialYesPrice Float
  initialNoPrice  Float
  quantity        Int
  sot             String
  traders         Int            @default(0)
  status          EventStatus    @default(ONGOING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  participants    User[]         @relation("EventParticipants")
  userContracts   UserContract[]
  trades          Trade[]        // Added inverse relation for trades
}

model UserContract {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  eventId            String
  event              Event    @relation(fields: [eventId], references: [id])
  yesContracts       Int      @default(0)
  noContracts        Int      @default(0)
  lockedYesContracts Int      @default(0)
  lockedNoContracts  Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, eventId])
}

model Trade {
  id        String   @id @default(cuid())
  tradeId   String   @unique // Unique ID for the trade from the engine
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  buyerId   String
  buyer     User     @relation("BuyerTrades", fields: [buyerId], references: [id])
  sellerId  String
  seller    User     @relation("SellerTrades", fields: [sellerId], references: [id])
  price     Float
  quantity  Int
  timestamp DateTime @default(now())

  @@index([buyerId])
  @@index([sellerId])
  @@index([eventId])
}

enum EventStatus {
  ONGOING
  ENDED
}

enum UserRole {
  ADMIN
  USER
}

// Removed this table because we are using FireBase for OTP Authentication...
// model OTP {
//   id         String   @id @default(cuid())
//   userId     String?
//   otp        String
//   createdAt  DateTime @default(now())
//   expiresAt  DateTime
//   otpID      String   @unique
//   isVerified Boolean  @default(false)
//   user       User?    @relation(fields: [userId], references: [id])
// }
